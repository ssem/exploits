#!/usr/bin/python
import os
import argparse
import requests

def find_web_root(firmware_path):
    flags = ["www", "htdocs"]
    for root, dirs, files in os.walk(os.path.expanduser(firmware_path)):
        for d in dirs:
            if d in flags:
                yield os.path.join(root,d)
 

def find_web_paths(firmware_path):
    for directory in find_web_root(firmware_path):
        for root, dirs, files in os.walk(directory):
            for f in files:
                path = os.path.join(root, f)[len(directory)+1:]
                if path != f:
                    yield path
                yield f
               
def request(ip, port, web_path):
    proto = "http"
    if port == "443":
        proto = "https"
    url = "%s://%s:%s/%s" % (proto, ip, port, web_path)
    http = requests.get(url, allow_redirects=False)
    return http.status_code, url, http.content

def main(ip, port, firmware_path, exclude):
    pages = {}
    # add root page
    code, url, content = request(ip, port, "")
    pages[content] = "/"
    # parse all pages
    for web_path in find_web_paths(firmware_path):
        code, url, content = request(ip, port, web_path)
        # filter
        if not exclude and content in pages:
            print code, url, "same content as %s" % pages[content]
        elif not exclude and code != 200:
            pages[content] = url
            print code, url
        elif not exclude and code == 200:
            pages[content] = url
            print code, url
        elif exclude and code == 200:
            tripped = False
            exclude_extentions = [".css", ".jpg", ".js", ".png", ".gif", ".html"]
            for ext in exclude_extentions:
                if url.endswith(ext):
                    tripped = True
            if not tripped:
                print code, url
       

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("firmware_path", help="path to root firmware")
    parser.add_argument("router_ip", help="ip address of router")
    parser.add_argument("-p", "--port", default="80", help="port of router")
    parser.add_argument("-x", "--exclude", action="store_true", help="exclude shit")
    args = parser.parse_args()
    main(args.router_ip, args.port, args.firmware_path, args.exclude)
