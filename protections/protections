#!/usr/bin/env python
import os
import re
import sys
import argparse
from subprocess import PIPE
from subprocess import Popen


class Sec_Check:
    def __init__(self, path):
        self.path = path
        self._ph= None
        self._sym = None
        self._dym = None

    def _program_header(self):
        p = Popen(["readelf", "-lW", self.path], stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        if err:
            raise Exception(err)
        self._ph = out

    def _symbols(self):
        p = Popen(["readelf", "-sW", self.path], stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        if err:
            raise Exception(err)
        self._sym = out

    def _dynamic(self):
        p = Popen(["readelf", "-dW", self.path], stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        if err:
            raise Exception(err)
        self._dym = out

    def position_independent(self):
        if self._ph == None:
            self._program_header()
        if "PHDR" in self._ph.split(" "):
            if "Elf file type is DYN " in self._ph:
                return "True"
            else:
                return "False"
        if "Elf file type is DYN " in self._ph:
            return "Shared Library"
        return "Unknown ELF Type"

    def stack_protection(self):
        if self._sym == None:
            self._symbols()
        if "__stack_chk_fail" in self._sym:
            return "True"
        return "False"

    def fortified_function(self):
        if self._sym == None:
            self._symbols()
        if re.search("__.*_chk", self._sym):
            return "True"
        return "False"

    def read_only_relocate(self):
        if self._ph == None:
            self._program_header()
        if "GNU_RELRO" in self._ph.split(" "):
            return "True"
        return "False"

    def immediate_bind(self):
        if self._dym == None:
            self._dynamic()
        for line in self._dym.split("\n"):
            if "(BIND_NOW)" in line or "(FLAGS)" in line:
                if " BIND_NOW" in line:
                    return "True"
        return "False"


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("File", help="input file")
    args = parser.parse_args()
    path = os.path.abspath(args.File)
    sc = Sec_Check(path)
    sys.stdout.write("Position Independent:  %s\n" % sc.position_independent())
    sys.stdout.write("Stack Protection:      %s\n" % sc.stack_protection())
    sys.stdout.write("Fortify Functions:     %s\n" % sc.fortified_function())
    sys.stdout.write("Read_only Relocations: %s\n" % sc.read_only_relocate())
    sys.stdout.write("Immediate Binding:     %s\n" % sc.immediate_bind())
